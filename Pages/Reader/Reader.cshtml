@page
@model EncomendasProject.Pages.Reader.ReaderModel

@using Encomendas.Models
@using System.Net.NetworkInformation

@{
    ViewData["Title"] = "Read QR Codes";
}

<h1>QR Code Scanner</h1>
<div>
    <h2 id="Readerh2">Scan Encomenda QR Code</h2>
    <video id="video" width="300" height="300" style="border: 1px solid black;"></video>
    <button id="startScanButton">Start Scan</button>
    <p id="result">Waiting for scan...</p>
</div>

<div id="details" style="display:none;">
    <h2>Details</h2>
    <p id="detailsText">Encomenda Number and Worker Number will be displayed here after scanning.</p>
</div>

@if (Model.Message != null)
{
    <div id="statusMessage">
        <h2>@Model.Message</h2>
    </div>
}

<form method="post"></form>

<script>
    window.addEventListener('load', () => {
        const codeReader = new ZXing.BrowserQRCodeReader();
        let encomendaNumber = '';
        let workerNumber = '';

        // Function to start scanning process
        const startScanning = async () => {
            Swal.fire({
                title: 'Scanning Encomenda QR Code...',
                text: 'Please wait.',
                icon: 'info',
                showConfirmButton: false,
                timer: 2000
            });

            try {
                const result = await codeReader.decodeFromInputVideoDevice(undefined, 'video');
                encomendaNumber = result.text;
                document.getElementById('result').textContent = `Encomenda QR Code: ${encomendaNumber} (Now scanning Worker QR Code...)`;
                codeReader.reset();
                startWorkerScan(); // Call to scan worker QR code
            } catch (err) {
                console.error('Scanning error:', err);
                Swal.fire({
                    title: 'Error',
                    text: `Error scanning Encomenda QR Code: ${err}`,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        };

        // Function to start scanning for Worker QR Code
        const startWorkerScan = async () => {
            Swal.fire({
                title: 'Scan Worker QR Code',
                text: 'Please scan the worker QR code.',
                icon: 'info',
                showConfirmButton: false,
                timer: 2000
            });

            try {
                const result = await codeReader.decodeFromInputVideoDevice(undefined, 'video');
                workerNumber = result.text;
                document.getElementById('result').textContent = `Worker QR Code: ${workerNumber}`;
                sendQRCodeData(encomendaNumber, workerNumber); // Send data to server
            } catch (err) {
                console.error('Worker scanning error:', err);
                Swal.fire({
                    title: 'Error',
                    text: `Error scanning Worker QR Code: ${err}`,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        };

        // Function to send QR Code data to the server
        // Function to send QR Code data to the server
        const sendQRCodeData = async (encomendaNumber, workerNumber) => {
            try {
                const response = await fetch('@Url.Page("Reader", "OnPost")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({
                        'QRCodeData': `${encomendaNumber}_${workerNumber}`
                    })
                });

                if (!response.ok) {
                    console.error('HTTP error:', response.status, response.statusText);
                    throw new Error(`Network response was not ok: ${response.statusText}`);
                }

                const data = await response.json();
                if (data.success) {
                    // Exibe a mensagem de sucesso incluindo o status da encomenda
                    Swal.fire({
                        title: 'Success',
                        text: `Encomenda Number: ${encomendaNumber}, Worker Number: ${workerNumber}. Status: ${data.status}. ${data.message}`,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        // Limpa o conteúdo dos elementos após a confirmação do SweetAlert2
                        document.getElementById('details').style.display = 'none'; // Oculta os detalhes
                        document.getElementById('detailsText').textContent = ''; // Limpa o texto dos detalhes
                        document.getElementById('result').textContent = 'Waiting for scan...'; // Restaura o texto inicial

                        // Reseta as variáveis
                        encomendaNumber = '';
                        workerNumber = '';
                    });
                } else {
                    Swal.fire({
                        title: 'Error',
                        text: data.message,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            } catch (err) {
                console.error('Fetch error:', err);
                Swal.fire({
                    title: 'Error',
                    text: `Error sending data to server: ${err.message}`,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        };


        // Event listener for start scan button
        document.getElementById('startScanButton').addEventListener('click', startScanning);
    });
</script>