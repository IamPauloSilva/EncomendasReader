@page
@model EncomendasProject.Pages.Reader.ReaderModel

@using Encomendas.Models
@using System.Net.NetworkInformation

@{
    ViewData["Title"] = "Read QR Codes";
}

<h1>QR Code Scanner</h1>
<div>
    <h2 id="Readerh2">Scan Encomenda QR Code</h2>
    <video id="video" width="300" height="300" style="border: 1px solid black;"></video>
    <button id="startScanButton">Start Scan</button>
    <p id="result">Waiting for scan...</p>
</div>

<div id="details" style="display:none;">
    <h2>Details</h2>
    <p id="detailsText">Encomenda Number and Worker Number will be displayed here after scanning.</p>
</div>

@if (Model.Message != null)
{
    <div id="statusMessage">
        <h2>@Model.Message</h2>
    </div>
}

<form method="post"></form>

<script>
    window.addEventListener('load', () => {
        const codeReader = new ZXing.BrowserQRCodeReader();
        let encomendaNumber = '';
        let workerNumber = '';

        // Function to start scanning process
        async function startScanning() {
            const readerHeader = document.getElementById('Readerh2');
            const resultElement = document.getElementById('result');
            if (!readerHeader || !resultElement) return;

            readerHeader.textContent = 'Scanning Encomenda QR Code...';
            try {
                const result = await codeReader.decodeFromInputVideoDevice(undefined, 'video');
                encomendaNumber = result.text;
                resultElement.textContent = `Encomenda QR Code: ${encomendaNumber} (Now scanning Worker QR Code...)`;
                codeReader.reset();
                startWorkerScan(); // Call to scan worker QR code
            } catch (err) {
                console.error('Scanning error:', err);
                resultElement.textContent = `Error scanning Encomenda QR Code: ${err}`;
            }
        }

        // Function to start scanning for Worker QR Code
        async function startWorkerScan() {
            const readerHeader = document.getElementById('Readerh2');
            const resultElement = document.getElementById('result');
            if (!readerHeader || !resultElement) return;

            readerHeader.textContent = 'Scan Worker QR Code';
            try {
                const result = await codeReader.decodeFromInputVideoDevice(undefined, 'video');
                workerNumber = result.text;
                resultElement.textContent = `Worker QR Code: ${workerNumber}`;
                sendQRCodeData(encomendaNumber, workerNumber); // Send data to server
            } catch (err) {
                console.error('Worker scanning error:', err);
                resultElement.textContent = `Error scanning Worker QR Code: ${err}`;
            }
        }

        // Function to send QR Code data to the server
        async function sendQRCodeData(encomendaNumber, workerNumber) {
            const detailsElement = document.getElementById('details');
            const statusMessageElement = document.getElementById('statusMessage');
            const detailsTextElement = document.getElementById('detailsText');
            const resultElement = document.getElementById('result');
            if (!detailsElement || !statusMessageElement || !detailsTextElement || !resultElement) return;

            try {
                const response = await fetch('@Url.Page("Reader", "OnPost")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({
                        'QRCodeData': `${encomendaNumber}_${workerNumber}`
                    })
                });

                if (!response.ok) {
                    console.error('HTTP error:', response.status, response.statusText);
                    throw new Error(`Network response was not ok: ${response.statusText}`);
                }

                const data = await response.json();
                if (data.success) {
                    detailsElement.style.display = 'block';
                    detailsTextElement.textContent = `Encomenda Number: ${encomendaNumber}, Worker Number: ${workerNumber}`;
                    statusMessageElement.innerHTML = `<h2>${data.message}</h2>`;
                } else {
                    statusMessageElement.innerHTML = `<h2>${data.message}</h2>`;
                }
            } catch (err) {
                console.error('Fetch error:', err);
                resultElement.textContent = `Error sending data to server: ${err.message}`;
            }
        }

        // Event listener for start scan button
        const startScanButton = document.getElementById('startScanButton');
        if (startScanButton) {
            startScanButton.addEventListener('click', startScanning);
        }
    });
</script>
